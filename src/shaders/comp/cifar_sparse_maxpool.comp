#version 460

precision highp float;
precision highp int;

layout(local_size_x = 256) in;

layout(std430, set = 0, binding = 0) readonly buffer InputBuffer {
  float input_data[];
};

layout(std430, set = 0, binding = 1) writeonly buffer OutputBuffer {
  float output_data[];
};

layout(push_constant) uniform Params {
  int input_channels;
  int input_height;
  int input_width;
  int pool_size;
  int stride;
} params;

void main() {
  uint i = gl_GlobalInvocationID.x;

  int output_height = (params.input_height - params.pool_size) / params.stride + 1;
  int output_width = (params.input_width - params.pool_size) / params.stride + 1;

  if (i >= params.input_channels * output_height * output_width) {
    return; // Out-of-bounds check
  }

  int c = int(i) / (output_height * output_width);
  int h = (int(i) / output_width) % output_height;
  int w = int(i) % output_width;

  float max_val = -3.402823466e+38; // Negative FLT_MAX

  for (int ph = 0; ph < params.pool_size; ++ph) {
    for (int pw = 0; pw < params.pool_size; ++pw) {
      int input_h = h * params.stride + ph;
      int input_w = w * params.stride + pw;

      if (input_h < params.input_height && input_w < params.input_width) {
        int input_index = c * (params.input_height * params.input_width) + input_h * params.input_width + input_w;
        max_val = max(max_val, input_data[input_index]);
      }
    }
  }

  int output_index = c * (output_height * output_width) + h * output_width + w;
  output_data[output_index] = max_val;
}
