// local_inclusive_scan.comp
#version 450
#extension GL_EXT_scalar_block_layout : enable

layout(local_size_x = 256, local_size_y = 1, local_size_z = 1) in;

layout(push_constant) uniform PushConstants { uint numElements; } push;

layout(set = 0, binding = 0) buffer InputBuffer { uint data[]; } inputBuffer;
layout(set = 0, binding = 1) buffer OutputBuffer { uint data[]; } outputBuffer;
layout(set = 0, binding = 2) buffer SumBuffer { uint sums[]; } sumBuffer;

shared uint sharedData[256];

void main() {
    uint workgroupID = gl_WorkGroupID.x;
    uint localID = gl_LocalInvocationID.x;
    uint globalID = workgroupID * 256 + localID;

    // Load data into shared memory, 0 if out of bounds
    uint value = (globalID < push.numElements) ? inputBuffer.data[globalID] : 0;
    sharedData[localID] = value;
    memoryBarrierShared();
    barrier();

    // Inclusive scan
    for (uint stride = 1; stride < 256; stride *= 2) {
        if (localID >= stride)
            value += sharedData[localID - stride];
        barrier();
        sharedData[localID] = value;
        barrier();
    }

    // Write results
    if (globalID < push.numElements)
        outputBuffer.data[globalID] = sharedData[localID];
    
    // Store block sum
    if (localID == 255)
        sumBuffer.sums[workgroupID] = sharedData[255];
}